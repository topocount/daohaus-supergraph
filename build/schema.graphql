type Moloch @entity {
  id: ID!
  summoner: Bytes!
  title: String
  version: String
  newContract: String
  deleted: Boolean
  summoningTime: BigInt!
  periodDuration: BigInt!
  votingPeriodLength: BigInt!
  gracePeriodLength: BigInt!
  proposalDeposit: BigInt!
  dilutionBound: BigInt!
  processingReward: BigInt!
  depositToken: Token
  approvedTokens: [Token!]!
  guildBankAddress: Bytes
  guildBankBalanceV1: BigInt
  tokens: [Token!] @derivedFrom(field: "moloch")
  members: [Member!] @derivedFrom(field: "moloch")
  tokenBalances: [TokenBalance!] @derivedFrom(field: "moloch")
  proposals: [Proposal!] @derivedFrom(field: "moloch")
  rageQuits: [RageQuit!] @derivedFrom(field: "moloch")
  totalShares: BigInt!
  totalLoot: BigInt!
}

type TokenBalance @entity {
  id: ID!
  moloch: Moloch!
  token: Token!
  tokenBalance: BigInt!
  member: Member
  guildBank: Boolean!
  ecrowBank: Boolean!
  memberBank: Boolean!
}

type Token @entity {
  id: ID!
  moloch: Moloch!
  tokenAddress: Bytes!
  whitelisted: Boolean!
  symbol: String
  decimals: BigInt
}

type Member @entity {
  id: ID!
  createdAt: String!
  moloch: Moloch!
  molochAddress: Bytes!
  memberAddress: Bytes!
  delegateKey: Bytes!
  shares: BigInt!
  loot: BigInt
  exists: Boolean!
  highestIndexYesVote: Proposal
  tokenTribute: BigInt!
  didRagequit: Boolean!
  votes: [Vote!] @derivedFrom(field: "member")
  submissions: [Proposal!] @derivedFrom(field: "member")
  tokenBalances: [TokenBalance!] @derivedFrom(field: "member")
  rageQuits: [RageQuit!] @derivedFrom(field: "member")
  proposedToKick: Boolean
  kicked: Boolean
  jailed: Proposal
}

type Vote @entity {
  id: ID!
  createdAt: String!
  proposal: Proposal!
  member: Member!
  uintVote: Int!
  molochAddress: Bytes!
  memberAddress: Bytes
  proposalIndex: BigInt
  delegateKey: Bytes
}

type Proposal @entity {
  id: ID!
  createdAt: String!
  proposalIndex: BigInt
  proposalId: BigInt!
  moloch: Moloch!
  molochAddress: Bytes!
  member: Member!
  memberAddress: Bytes!
  delegateKey: Bytes!
  applicant: Bytes!
  proposer: Bytes
  sponsor: Bytes!
  sharesRequested: BigInt!
  lootRequested: BigInt!
  tributeOffered: BigInt!
  tributeToken: Bytes!
  tributeTokenSymbol: String
  tributeTokenDecimals: BigInt
  paymentRequested: BigInt!
  paymentToken: Bytes!
  paymentTokenSymbol: String
  paymentTokenDecimals: BigInt
  startingPeriod: BigInt
  yesVotes: BigInt!
  noVotes: BigInt!
  sponsored: Boolean!
  sponsoredAt: String
  processed: Boolean!
  didPass: Boolean!
  cancelled: Boolean
  aborted: Boolean
  whitelist: Boolean
  guildkick: Boolean
  newMember: Boolean
  trade: Boolean
  details: String
  maxTotalSharesAndLootAtYesVote: BigInt
  votes: [Vote!] @derivedFrom(field: "proposal")
  yesShares: BigInt!
  noShares: BigInt!
  votingPeriodStarts: BigInt!
  votingPeriodEnds: BigInt!
  gracePeriodEnds: BigInt!
  molochVersion: String!
}

type RageQuit @entity {
  id: ID!
  createdAt: String!
  moloch: Moloch!
  molochAddress: Bytes!
  member: Member!
  memberAddress: Bytes!
  shares: BigInt!
  loot: BigInt!
}

type DaoMeta @entity {
  id: ID!
  title: String
  version: String
  newContract: String
}
